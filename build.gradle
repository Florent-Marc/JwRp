buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

repositories {
    jcenter()

}
repositories {
    mavenCentral()
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

repositories {
    maven {
        url('http://maven.dynamx.fr/artifactory/DynamXRepo')
    }
}


apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'

sourceSets {main { output.resourcesDir = output.classesDir }}

group = 'com'
version = '1.0'
archivesBaseName = 'jw'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {

mappings channel: 'stable', version: '39-1.12'

runs {
client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                jw {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                jw {
                    source sourceSets.main
                }
            }
        }
    }
}
configurations {
    shade
    compile.extendsFrom shade
}
/*
task runApp(type: JavaExec) {
    main = "com.mk.jw.jw"
    classpath = shadowJar.archivePath
}

 */
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
shadowJar {

    dependencies {
        include(dependency('com.leviathanstudio:CraftStudio:1.0.1.95-mc1.12-alpha'))
    }

    classifier = ''
}
//build.metaClass(shadowJar)
build.dependsOn(shadowJar)

reobf {
    shadowJar {
        //mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

dependencies {
    compile fileTree(dir: 'depend', include: '*.jar')
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
    implementation 'net.dv8tion:JDA:4.3.0_277'
    compile 'club.minnced:java-discord-rpc:2.0.0'
    //compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.21'
    implementation 'fr.dynamx:DynamX:2.17.1'


}


jar {
    manifest {
        attributes([
                "Specification-Title"     : "jw",
                "Specification-Vendor"    : "MK, Afhistos",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "MK, Afhistos",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Main-Class": "com.mk.jw.jw"
        ])
    }

}

jar.finalizedBy('reobfJar')
